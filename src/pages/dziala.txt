import { createContext, useReducer, useEffect, ReactNode } from "react";
import { getAuth, User } from "firebase/auth";

interface AuthState {
  user: User | null;
  authIsReady: boolean;
}

interface AuthAction {
  type: string;
  payload: User | null;
}

interface AuthContextProps extends AuthState {
  dispatch: React.Dispatch<AuthAction>;
}
interface AuthContextProviderProps {
  children: ReactNode;
}
export const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case "LOGIN":
      return { ...state, user: action.payload };
    case "LOGOUT":
      return { ...state, user: null };
    case "AUTH_IS_READY":
      return { user: action.payload, authIsReady: true };
    default:
      return state;
  }
};

export const AuthContextProvider: React.FC<AuthContextProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, {
    user: null,
    authIsReady: false,
  });

  useEffect(() => {
    const unsub = getAuth().onAuthStateChanged((user) => {
      dispatch({ type: "AUTH_IS_READY", payload: user });
      unsub();
    });
  }, []);
  console.log("AuthContext state:", state);
  return <AuthContext.Provider value={{ ...state, dispatch }}>{children}</AuthContext.Provider>;
};

import { createContext, useReducer, useEffect, ReactNode } from "react";
// import { getAuth } from "firebase/auth";
import { AuthState, AuthAction, AuthContextProviderProps, AuthContextProps } from "./types";
export const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case "LOGIN":
      return { ...state, user: action.payload };
    case "LOGOUT":
      return { ...state, user: null };
    // case "AUTH_IS_READY":
    //   return { user: action.payload, authIsReady: true };
    default:
      return state;
  }
};

export const AuthContextProvider: React.FC<AuthContextProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, {
    user: null,
    // authIsReady: false,
  });

  // useEffect(() => {
  //   const unsub = getAuth().onAuthStateChanged((user) => {
  //     dispatch({ type: "AUTH_IS_READY", payload: user });
  //     unsub();
  //   });
  // }, []);
  console.log("AuthContext state:", state);
  return <AuthContext.Provider value={{ ...state, dispatch }}>{children}</AuthContext.Provider>;
};

